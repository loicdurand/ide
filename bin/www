#!/usr/bin/env node

/**
 * Module dependencies.
 */

const // 
  express = require('express'),
  cookieParser = require('cookie-parser'),
  path = require('path'),
  debug = require('debug'),
  http = require('http'),
  App = require('../server/app.js');

debug('ide:server');

const // 

  /**
   * Get port from environment and store in Express.
   */

  port = normalizePort(process.env.PORT || '3000'),
  app = express()
    .set('port', port)

    // view engine setup
    .set('views', path.join(__dirname, '../views'))
    .set('view engine', 'hbs')

    .use(express.json())
    .use(express.urlencoded({ extended: false }))
    .use(cookieParser())
    .use(express.static(path.join(__dirname, '../dist')))

    .use(App),

  /**
   * Create HTTP server.
   */

  server = http
    .createServer(app)
    .listen(port);

server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
